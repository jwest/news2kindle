<?php
/**
 * Send articles to kindle
 * 3 states:
 *   - grab articles
 *   - preapre mobi format
 *   - send to kindle via email
 *
 * @author Jakub Westfalewski <jwest@jwest.pl>
 */ 

require 'lib/utils.php';
require 'lib/io.php';
require 'lib/api.php';
require 'lib/send.php';
require 'lib/images.php';
require 'lib/storage.php';
require 'lib/readability.php';
require 'lib/MOBIClass/MOBI.php';

IO::msg('News2Kindle - v.0.1');
IO::msg('--------------------------------------------');
IO::msg('https://github.com/jwest/news2kindle');
IO::msg('');

/*
 * STATE 0 - Prepare objects
 * ----------------------------------
 */

IO::prepare_args($argv); //preapre args
$storage = new Storage('static'); //prepare newspapper

/*
 * HELP - help - show help
 * ----------------------------------
 */
if ( IO::arg('help') )
{
    IO::msg('Help:');

    foreach ( IO::get_help() as $arg => $help )
    {
        IO::msg( '-' . $arg[0] . ', --' . $arg . ' | ' . $help);
    }
}

/*
 * STATE 1 - grab - Grab yours articles
 * ----------------------------------
 */
if ( IO::arg('grab') )
{
    try
    {
        IO::command('Login to Google Reader API');
        $api = new API(IO::arg('login'), IO::arg('password'));
        IO::ok();

        IO::command('Get ' . IO::arg('maxitems') . ' items from reader');
        $items = $api->get_unread( IO::arg('maxitems') )->items;
        IO::ok();

        if ( count($items) == 0 )
        {
            IO::msg('Items not exists!');
        }
        else
        {
            IO::msg('Start conversion for ' . count($items) . ' items:');
        }

        //prepare articles
        foreach ( $items as $i => $item )
        {
            IO::command( ($i+1) . '. item convert');

            $file_url_content = @file_get_contents($item->alternate[0]->href);

            $ra = new Readability2($file_url_content, 'utf-8');
            $content = $ra->getContent();

            $images = new Images($storage, $content['content']);
            $content = $images->convert();

            //save article
            $storage->add_content
            (
                Utils::prepare_id($item->id), 
                mb_convert_encoding($item->title, 'HTML-ENTITIES', 'utf-8'), 
                $content, 
                $item->alternate[0]->href, 
                $item->origin
            );

            $api->set_state($item->id);

            IO::ok();
        }
    }
    catch(AutentificationException $e)
    {
        IO::error( $e->getMessage() );
    }
    catch(Exception $e)
    {
        IO::error( $e->getMessage() );
    }
}

/*
 * STATE 2 - mobi - Prepare mobi from html and clean
 * ----------------------------------
 */
if ( IO::arg('mobi') )
{
    try
    {
        IO::command('Load prepared articles');
        
        $articles = $storage->get_contents();
        
        IO::ok();

        IO::command('Prepare table of content');
        
        $toc = array();
        $articles_count = count($articles);

        foreach($articles as $article){
            if(array_key_exists($article->website->title, $toc)){
                $toc[$article->website->title]->articles[] = $article;             
            }else{
                $toc[$article->website->title] = (object)array(
                    'articles' => array($article),
                    'title' => $article->website->title,
                    'streamId' => $article->website->streamId,
                    'url' => $article->website->htmlUrl,
                );
            }           
        }

        IO::ok();

        IO::command('Render HTML from template "' . IO::arg('html') . '"');
        
        ob_start();
        
        require 'data/' . IO::arg('html') . '.php';
        $content = ob_get_contents();        
        
        ob_end_clean();
        
        IO::ok();

        IO::command('Prepare MOBI format');
        
        $mobi = new MOBI(); 
        $mobi->setData($content);
        $mobi->setOptions(array( 
            'title' => 'Articles from '.date('Y-m-d'), 
            'author' => 'news2Kindle', 
            'subject' => 'Articles from '.date('Y-m-d'),
        ));

        $images = array();

        //prepare images for mobi format
        foreach ( $storage->info('images') as $n => $image )
        {
            $images[$n] = new FileRecord(new Record(file_get_contents($storage->get_path() . $image)));
        }

        $mobi->setImages($images);
        $mobi->save( $storage->get_path(false) . 'articles-' . date('Y-m-d') . '.mobi');

        IO::ok();

        IO::command('Clean temporary files');
        $storage->clean();
        IO::ok();

    }
    catch(Exception $e)
    {
        IO::error( $e->getMessage() );
    }
}

/*
 * STATE 3 - send - Send by email to Kindle
 * ----------------------------------
 */
if ( IO::arg('send') )
{
    try
    {
        IO::command('Get mobi files to send');

        $files = glob($storage->get_path(false).'*.mobi');        

        IO::ok();

        IO::command('Send newspappers');

        $mail = new Send( IO::arg('kindle'), IO::arg('login') );

        foreach ( $files as $file_mobi )
        {
            $mail->send( $file_mobi );
        }

        IO::ok();

        IO::command('Delete sending newspappers');
        
        foreach ( $files as $file_mobi )
        {
            //unlink( $file_mobi );
        }

        IO::ok();
    }
    catch(Exception $e)
    {
        IO::error( $e->getMessage() );
    }
}

IO::msg("END.\n");